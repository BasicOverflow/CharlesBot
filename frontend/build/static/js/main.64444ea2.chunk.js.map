{"version":3,"sources":["components/navitem.js","components/navbar.js","components/header.js","components/webShip.js","components/chatlog.js","components/interface.js","App.js","reportWebVitals.js","index.js"],"names":["Navitem","title","page","style","href","Navbar","className","Header","Webship","setShiped","setFirstMsg","firstMsg","type","id","onChange","e","target","value","onClick","fetch","method","headers","then","res","json","data","console","log","JSON","stringify","ChatLog","ws","setShipped","useState","from","content","messages","setMsgs","message","setMessage","goBack","setGoBack","onmessage","toLowerCase","includes","onclose","close","action","onSubmit","preventDefault","msg","send","submitMsg","placeholder","map","uuid","Interface","shipped","WebSocket","App","connected","setConnected","onopen","memo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64444ea2.chunk.js","sourcesContent":["\r\n\r\nconst Navitem = ({ title, page }) => {\r\n    return (\r\n        <a style={ {'color':'navy', 'padding':'5px'} } href= { page } > { title } </a>\r\n    )\r\n}\r\n\r\nexport default Navitem\r\n","import Navitem from \"./navitem\"\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\" style={{ 'align':'center' }}>\r\n            <Navitem page=\"#\" title=\"About\"/>\r\n            <Navitem page=\"#\" title=\"How to Use\"/>\r\n            <Navitem page=\"#\" title=\"Download Client\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import Navbar from './navbar.js'\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","// import { useState } from \"react\"\r\n\r\n\r\n\r\nconst Webship = ({ setShiped, setFirstMsg, firstMsg }) => {\r\n    //upon sending ship request and receiving the successful confimation back, sets shipped bool in interface component to true so the chatlog can get rendered instead\r\n    //when buttun is clicked, will call setShipped and fetch a post to the charles API\r\n\r\n    const shipCmd = (command) => {\r\n        //make post request to API \r\n        fetch(`http://10.0.0.129:8004/manualShip/WebClient/${command}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'accept': 'application/json',\r\n                'mode': 'no-cors'\r\n            }\r\n        }).then(function(res){ return res.json(); })\r\n        .then(function(data){ console.log( JSON.stringify(data)) })\r\n    }\r\n\r\n    const getInptVal = (e) => {\r\n        // console.log(e.target.value);\r\n        // setFirstMsg({ from:'client', content:e.target.value });\r\n        setFirstMsg(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Ship Command</h1>\r\n            <input type=\"text\" id=\"messageText\" onChange={ getInptVal }/>\r\n            <button onClick={() => {\r\n                shipCmd(firstMsg);\r\n                setShiped();\r\n            }\r\n            }>Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Webship","import { useState } from 'react'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\n\r\n//https://scriptverse.academy/tutorials/reactjs-chat-websocket.html\r\n\r\n\r\n\r\n//TODO: pass in props needed for starting websocket stream\r\nconst ChatLog = ({ firstMsg, ws, setShipped}) => {\r\n    // messages is an array that holds all messages between user and charles. Schema for each msg: {\"from\":\"\", \"content\":\"\"} *from user or charles\r\n\tconst [messages, setMsgs] = useState([{ from:'client',content:firstMsg }]);\r\n    const [message, setMessage] = useState([]);\r\n\tconst [goBack, setGoBack] = useState(false);\r\n\t\r\n\r\n    const submitMsg = (msg) => {\r\n        const message = { from: \"WebClient\", content: msg };\r\n        ws.send(message.content);\r\n        setMsgs([...messages, message])\r\n    }\r\n\r\n\tws.onmessage = (e) => {\r\n\t\tconst message = { from: \"WebClient\", content: e.data };\r\n\t\tsetMsgs([...messages, message]);\r\n\t\tconsole.log(e.data);\r\n\t\t//TODO: Additional logic to detect charles sending to msges at once\r\n\t\t//Logic to detect end of command session:\r\n\t\tif (e.data.toLowerCase().includes(\"command completed\")) {\r\n\t\t\tsetGoBack(true);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tws.onclose = () => {\r\n\t\tws.close()\r\n\t\tconsole.log('WebSocket Disconnected');\r\n\t}\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form\r\n\t          action=\"\"\r\n\t          onSubmit={e => {\r\n\t            e.preventDefault();\r\n\t            submitMsg(message);\r\n                setMessage([]);\r\n\t          }}\r\n\t        >\r\n\t          <input\r\n\t            type=\"text\"\r\n\t            placeholder={'Type a message ...'}\r\n\t            value={message}\r\n\t            onChange={e => setMessage(e.target.value)}\r\n\t          />\r\n\t          <input type=\"submit\" value={'Send'} />\r\n\t        </form>\r\n\r\n            { messages.map( (msg) => (<h3 key={uuid()}>{ msg.content }</h3>)) }\r\n\r\n\t\t\t{ goBack ? <button onClick={() => { setShipped() }}>Go Back?</button>: <></> }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatLog\r\n\r\n\r\n\r\n\r\n","//the component that houses the actial communication with charles API\r\nimport { useState } from \"react\"\r\nimport Webship from \"./webShip\"\r\nimport ChatLog from \"./chatlog\"\r\n\r\n\r\n//First renders webship\r\n//once user inputs to ship a command to charles, the shipped bool is set to true and the chatlog will get rendered instead\r\n//shipped is changed by the webship component by passing in a setShipped function as a prop\r\n\r\nconst Interface = ({ ws }) => {\r\n    const [shipped, setShipped] = useState(false);\r\n    const [firstMsg, setFirstMsg] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            { shipped ? <ChatLog firstMsg={ firstMsg } ws={ ws } setShipped={ () => {setShipped(false)} }/> : \r\n            <Webship firstMsg={ firstMsg } setFirstMsg={ setFirstMsg } setShiped={ () => {setShipped(true);}}/> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Interface\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport Header from './components/header.js'\nimport Interface from './components/interface.js'\nimport { memo,useState,useEffect } from \"react\"\n\nconst ws = new WebSocket('ws://10.0.0.129:8004/ws/CommandSessionClient/WebClient')\n\n\nfunction App() {\n  console.log(\"app\")\n  const [connected, setConnected] = useState(false);\n\n  ws.onopen = () => {\n    if (connected === true) {\n      console.log(\"Connection alread present, closing\")\n      ws.close()\n    }\n    else {\n      setConnected(true);\n      console.log('WebSocket Connected');\n    }\n    \n  }\n  ws.onclose = () => (setConnected(false));\n\n  // useEffect(() => {\n  //   return () => {\n  //     // console.log(\"working\")\n  //     ws.close()\n  //   }\n  // }, [ws.onclose]);\n  \n\n  return (\n    <div className=\"App\">\n        <Header/>\n      <div className=\"showcase\"> \n        <Interface ws={ ws }/> \n      </div>\n    </div>\n  );\n}\n\nexport default memo(App);\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}